# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#####################hydra-fuzz###################
import("//build/config/features.gni")
import("//build/test.gni")
import("../../../../../distributedinput.gni")

##############################fuzztest##########################################
ohos_fuzztest("DistributedInputStubFuzzTest") {
  module_out_path = fuzz_test_path

  fuzz_config_file = "${ipc_path}/test/fuzztest/distributedinputstub_fuzzer"

  include_dirs = [
    "${av_transport_path}/common/include",
    "${innerkits_path}/include",
    "${innerkits_path}/ipc/include",
    "${innerkits_path}/src",
    "${ipc_path}/include",
    "${ipc_path}/src",
    "${services_source_path}/sourcemanager/include",
    "${frameworks_path}/include",
    "${distributedinput_path}/inputdevicehandler/include",
    "${common_path}/include",
    "${services_state_path}/include",
    "${service_common}/include",
    "${services_source_path}/inputinject/include",
    "${services_source_path}/transport/include",
    "${dfx_utils_path}/include",
    "${utils_path}/include",
    "${fwk_interfaces_path}/include",
    "${fwk_interfaces_path}/include/ipc",
    "${common_path}/test/mock",
    "${distributedinput_path}/services/transportbase/include",
    "${distributedinput_path}/utils/include",
    "${distributedinput_path}/services/state/include",
  ]

  cflags = [
    "-g",
    "-O0",
    "-Wno-unused-variable",
    "-fno-omit-frame-pointer",
    "-Dprivate=public",
    "-Dprotected=public",
  ]
  sources = [
    "${common_path}/include/input_hub.cpp",
    "${common_path}/test/mock/socket_mock.cpp",
    "${common_path}/test/mock/softbus_bus_center_mock.cpp",
    "${distributedinput_path}/services/transportbase/src/distributed_input_transport_base.cpp",
    "${distributedinput_path}/utils/src/dinput_context.cpp",
    "${distributedinput_path}/utils/src/dinput_utils_tool.cpp",
    "${ipc_path}/src/add_white_list_infos_call_back_proxy.cpp",
    "${ipc_path}/src/add_white_list_infos_call_back_stub.cpp",
    "${ipc_path}/src/del_white_list_infos_call_back_proxy.cpp",
    "${ipc_path}/src/del_white_list_infos_call_back_stub.cpp",
    "${ipc_path}/src/distributed_input_sink_proxy.cpp",
    "${ipc_path}/src/distributed_input_sink_stub.cpp",
    "${ipc_path}/src/distributed_input_source_proxy.cpp",
    "${ipc_path}/src/distributed_input_source_stub.cpp",
    "${ipc_path}/src/get_sink_screen_infos_call_back_proxy.cpp",
    "${ipc_path}/src/get_sink_screen_infos_call_back_stub.cpp",
    "${ipc_path}/src/prepare_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/prepare_d_input_call_back_stub.cpp",
    "${ipc_path}/src/register_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/register_d_input_call_back_stub.cpp",
    "${ipc_path}/src/start_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/start_d_input_call_back_stub.cpp",
    "${ipc_path}/src/stop_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/stop_d_input_call_back_stub.cpp",
    "${ipc_path}/src/unprepare_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/unprepare_d_input_call_back_stub.cpp",
    "${ipc_path}/src/unregister_d_input_call_back_proxy.cpp",
    "${ipc_path}/src/unregister_d_input_call_back_stub.cpp",
    "${services_source_path}/inputinject/src/distributed_input_inject.cpp",
    "${services_source_path}/inputinject/src/distributed_input_node_manager.cpp",
    "${services_source_path}/inputinject/src/virtual_device.cpp",
    "${services_source_path}/sourcemanager/src/dinput_source_listener.cpp",
    "${services_source_path}/sourcemanager/src/dinput_source_manager_event_handler.cpp",
    "${services_source_path}/sourcemanager/src/distributed_input_source_event_handler.cpp",
    "${services_source_path}/sourcemanager/src/distributed_input_source_manager.cpp",
    "${services_source_path}/sourcemanager/src/distributed_input_source_sa_cli_mgr.cpp",
    "${services_source_path}/transport/src/distributed_input_source_transport.cpp",
    "distributedinputstub_fuzzer.cpp",
  ]

  deps = [
    "${dfx_utils_path}:libdinput_dfx_utils",
    "${distributedinput_path}/services/state:libdinput_sink_state",
    "${innerkits_path}:libdinput_sdk",
    "${services_source_path}/transport:libdinput_source_trans",
    "${utils_path}:libdinput_utils",
  ]

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "access_token:libtokenid_sdk",
    "c_utils:utils",
    "distributed_hardware_fwk:distributedhardwareutils",
    "distributed_hardware_fwk:libdhfwk_sdk",
    "eventhandler:libeventhandler",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "libevdev:libevdev",
    "openssl:libcrypto_shared",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"DistributedInputStubFuzzTest\"",
    "LOG_DOMAIN=0xD004120",
  ]
}

###############################################################################
group("fuzztest") {
  testonly = true

  deps = [ ":DistributedInputStubFuzzTest" ]
}
###############################################################################
